import logging
import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "7567556638:AAGG2kmz0AGKVSorsVETUME5USI1Q8J6SEE"
ADMIN_IDS = [6754891703, 1684583517]
GROUP_ID = -1003004800348
ORDER_STATUSES = ["–í—ã–∫—É–ø–ª–µ–Ω", "–ü—Ä–∏–±—ã–ª –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ì—É–∞–Ω—á–∂–æ—É", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–ü—Ä–∏–±—ã–ª –≤ –ú–æ—Å–∫–≤—É", "–ó–∞–≤–µ—Ä—à—ë–Ω"]
ORDER_STATUS_MAPPING = {
    "–í—ã–∫—É–ø–ª–µ–Ω": "bought",
    "–ü—Ä–∏–±—ã–ª –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ì—É–∞–Ω—á–∂–æ—É": "warehouse_guangzhou", 
    "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω": "shipped",
    "–ü—Ä–∏–±—ã–ª –≤ –ú–æ—Å–∫–≤—É": "moscow",
    "–ó–∞–≤–µ—Ä—à—ë–Ω": "completed"
}

# –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ callback_data
CALLBACK_TO_STATUS = {v: k for k, v in ORDER_STATUS_MAPPING.items()}
TRACK_NUMBER_LENGTH = 10
TRACK_NUMBER_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
DATABASE_NAME = "orders.db"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é
BOT_INFO_LINK = "https://t.me/resalevlg"    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class OrderTrackerBot:
    def __init__(self, token: str):
        self.token = token
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = None
        try:
            conn = sqlite3.connect(DATABASE_NAME, timeout=10.0)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS orders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    track_number TEXT UNIQUE NOT NULL,
                    status TEXT NOT NULL DEFAULT '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER UNIQUE NOT NULL,
                    first_name TEXT,
                    last_name TEXT,
                    username TEXT,
                    first_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
        except Exception as e:
            logger.error(f"Database initialization error: {e}")
        finally:
            if conn:
                conn.close()
    
    def generate_track_number(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–∞ –¥–ª–∏–Ω–æ–π 10 —Å–∏–º–≤–æ–ª–æ–≤"""
        return ''.join(random.choice(TRACK_NUMBER_CHARS) for _ in range(TRACK_NUMBER_LENGTH))
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id in ADMIN_IDS
    
    def get_order_status(self, track_number: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø–æ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä—É"""
        conn = None
        try:
            conn = sqlite3.connect(DATABASE_NAME, timeout=10.0)
            cursor = conn.cursor()
            
            cursor.execute('SELECT status FROM orders WHERE track_number = ?', (track_number,))
            result = cursor.fetchone()
            
            if result:
                return result[0]
            return None
        except Exception as e:
            logger.error(f"Database error in get_order_status: {e}")
            return None
        finally:
            if conn:
                conn.close()
    
    def create_order(self, track_number: str, status: str = '–í—ã–∫—É–ø–ª–µ–Ω') -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        conn = None
        try:
            conn = sqlite3.connect(DATABASE_NAME, timeout=10.0)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO orders (track_number, status) 
                VALUES (?, ?)
            ''', (track_number, status))
            
            conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False  # –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        except Exception as e:
            logger.error(f"Database error in create_order: {e}")
            return False
        finally:
            if conn:
                conn.close()
    
    def update_order_status(self, track_number: str, new_status: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        conn = None
        try:
            conn = sqlite3.connect(DATABASE_NAME, timeout=10.0)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE orders 
                SET status = ?, updated_at = CURRENT_TIMESTAMP 
                WHERE track_number = ?
            ''', (new_status, track_number))
            
            affected_rows = cursor.rowcount
            conn.commit()
            
            return affected_rows > 0
        except Exception as e:
            logger.error(f"Database error in update_order_status: {e}")
            return False
        finally:
            if conn:
                conn.close()
    
    def get_all_orders(self) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
        conn = None
        try:
            conn = sqlite3.connect(DATABASE_NAME, timeout=10.0)
            cursor = conn.cursor()
            
            cursor.execute('SELECT track_number, status FROM orders ORDER BY created_at DESC')
            orders = cursor.fetchall()
            
            return orders
        except Exception as e:
            logger.error(f"Database error in get_all_orders: {e}")
            return []
        finally:
            if conn:
                conn.close()
    
    def is_user_registered(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        conn = None
        try:
            conn = sqlite3.connect(DATABASE_NAME, timeout=10.0)
            cursor = conn.cursor()
            
            cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            
            return result is not None
        except Exception as e:
            logger.error(f"Database error in is_user_registered: {e}")
            return False
        finally:
            if conn:
                conn.close()
    
    def register_user(self, user_id: int, first_name: str = None, last_name: str = None, username: str = None) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = None
        try:
            conn = sqlite3.connect(DATABASE_NAME, timeout=10.0)
            cursor = conn.cursor()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_id,))
            existing_user = cursor.fetchone()
            
            if existing_user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º last_seen
                cursor.execute('''
                    UPDATE users 
                    SET last_seen = CURRENT_TIMESTAMP, 
                        first_name = COALESCE(?, first_name),
                        last_name = COALESCE(?, last_name),
                        username = COALESCE(?, username)
                    WHERE user_id = ?
                ''', (first_name, last_name, username, user_id))
                conn.commit()
                return False
            else:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                cursor.execute('''
                    INSERT INTO users (user_id, first_name, last_name, username) 
                    VALUES (?, ?, ?, ?)
                ''', (user_id, first_name, last_name, username))
                conn.commit()
                return True
                
        except sqlite3.OperationalError as e:
            logger.error(f"Database error in register_user: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error in register_user: {e}")
            return False
        finally:
            if conn:
                conn.close()

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_instance = None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def notify_group(message: str, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É"""
    try:
        await context.bot.send_message(
            chat_id=GROUP_ID,
            text=message,
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")

async def notify_new_user(user_info: str, context: ContextTypes.DEFAULT_TYPE):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    message = f"üÜï <b>–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>\n\n{user_info}"
    await notify_group(message, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    user = update.effective_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω)
    if not bot_instance.is_admin(user_id):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_new_user = bot_instance.register_user(
            user_id=user_id,
            first_name=user.first_name,
            last_name=user.last_name,
            username=user.username
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        if is_new_user:
            user_info = f"üë§ <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
            if user.last_name:
                user_info += f" {user.last_name}"
            user_info += f"\nüÜî <b>ID:</b> <code>{user_id}</code>"
            if user.username:
                user_info += f"\nüì± <b>Username:</b> @{user.username}"
            user_info += f"\nüìÖ <b>–í—Ä–µ–º—è:</b> {update.message.date.strftime('%d.%m.%Y %H:%M')}"
            user_info += f"\nüîó <b>–°—Å—ã–ª–∫–∞:</b> <a href='tg://user?id={user_id}'>–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</a>"
            
            await notify_new_user(user_info, context)
    
    # –ï–¥–∏–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    keyboard = [
        [InlineKeyboardButton("üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="track_order")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω" —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if bot_instance.is_admin(user_id):
        keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω", callback_data="admin_panel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not update.message or not update.message.text:
        return
        
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if user_states.get(user_id) != 'tracking':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –ù–ï –†–ï–ê–ì–ò–†–£–ï–ú –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –¢–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã /start –∏ /menu –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)
    if len(text) == 10 and text.isalnum():
        status = bot_instance.get_order_status(text.upper())
        if status:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if bot_instance.is_admin(user_id):
                back_callback = "back_from_admin"
            else:
                back_callback = "main_menu"
                
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)],
                [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üì¶ –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: <code>{text.upper()}</code>\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if bot_instance.is_admin(user_id):
                back_callback = "back_from_admin"
            else:
                back_callback = "main_menu"
                
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)],
                [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞.",
                reply_markup=reply_markup
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–∞
        user_states[user_id] = None
    else:
        keyboard = [
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–∞.\n"
            "–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã).\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=reply_markup
        )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == "all_orders":
        if not bot_instance.is_admin(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
            
        orders = bot_instance.get_all_orders()
        if orders:
            message = "üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã:\n\n"
            for track_number, status in orders:
                message += f"üî∏ <code>{track_number}</code>: {status}\n"
        else:
            message = "üì¶ –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
    
    elif query.data == "create_order":
        if not bot_instance.is_admin(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
            
        track_number = bot_instance.generate_track_number()
        success = bot_instance.create_order(track_number)
        
        if success:
            message = f"‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n\nüì¶ –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: <code>{track_number}</code>\nüìä –°—Ç–∞—Ç—É—Å: –í—ã–∫—É–ø–ª–µ–Ω"
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            admin_notification = f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>\n\nüì¶ <b>–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä:</b> <code>{track_number}</code>\nüìä <b>–°—Ç–∞—Ç—É—Å:</b> –í—ã–∫—É–ø–ª–µ–Ω\nüë§ <b>–°–æ–∑–¥–∞–ª:</b> {query.from_user.first_name or '–ê–¥–º–∏–Ω'}"
            await notify_group(admin_notification, context)
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
    
    elif query.data == "change_status":
        if not bot_instance.is_admin(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
            
        orders = bot_instance.get_all_orders()
        if orders:
            keyboard = []
            for track_number, status in orders[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                keyboard.append([InlineKeyboardButton(
                    f"{track_number} - {status}", 
                    callback_data=f"edit_{track_number}"
                )])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
                reply_markup=reply_markup
            )
        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("üì¶ –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=reply_markup)
    
    elif query.data == "back_to_admin":
        keyboard = [
            [InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="all_orders")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="create_order")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="change_status")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_from_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –º–µ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        current_text = query.message.text
        new_text = "üîß –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if current_text != new_text:
            await query.edit_message_text(new_text, reply_markup=reply_markup)
        else:
            await query.answer("–í—ã —É–∂–µ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏")
    
    elif query.data.startswith("edit_"):
        if not bot_instance.is_admin(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
            
        track_number = query.data[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "edit_"
        
        keyboard = []
        for status in ORDER_STATUSES:
            callback_data = ORDER_STATUS_MAPPING[status]
            keyboard.append([InlineKeyboardButton(
                f"üì¶ {status}", 
                callback_data=f"status_{track_number}_{callback_data}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="change_status")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ <code>{track_number}</code>:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    elif query.data.startswith("status_"):
        if not bot_instance.is_admin(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
            
        parts = query.data.split("_")
        track_number = parts[1]
        callback_status = parts[2]
        new_status = CALLBACK_TO_STATUS[callback_status]
        
        success = bot_instance.update_order_status(track_number, new_status)
        
        if success:
            message = f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ <code>{track_number}</code> –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <code>{new_status}</code>"
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            admin_notification = f"‚úèÔ∏è <b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\nüì¶ <b>–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä:</b> <code>{track_number}</code>\nüìä <b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> {new_status}\nüë§ <b>–ò–∑–º–µ–Ω–∏–ª:</b> {query.from_user.first_name or '–ê–¥–º–∏–Ω'}"
            await notify_group(admin_notification, context)
        else:
            message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ <code>{track_number}</code>"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='HTML')
    
    elif query.data == "main_menu":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_states[user_id] = None
        
        if bot_instance.is_admin(user_id):
            keyboard = [
                [InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="all_orders")],
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="create_order")],
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="change_status")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_from_admin")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –º–µ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_text = query.message.text
            new_text = "üîß –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            if current_text != new_text:
                await query.edit_message_text(new_text, reply_markup=reply_markup)
            else:
                await query.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∞")
        else:
            keyboard = [
                [InlineKeyboardButton("üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="track_order")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –º–µ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            current_text = query.message.text
            new_text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            if current_text != new_text:
                await query.edit_message_text(new_text, reply_markup=reply_markup)
            else:
                await query.answer("–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
    
    elif query.data == "track_order":
        user_id = query.from_user.id
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = 'tracking'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if bot_instance.is_admin(user_id):
            back_callback = "back_from_admin"
        else:
            back_callback = "main_menu"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä (10 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):",
            reply_markup=reply_markup
        )
    
    elif query.data == "admin_panel":
        if not bot_instance.is_admin(user_id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
            
        keyboard = [
            [InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="all_orders")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="create_order")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="change_status")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_from_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üîß –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    elif query.data == "back_from_admin":
        # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="track_order")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω" —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if bot_instance.is_admin(user_id):
            keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    elif query.data == "faq":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ FAQ
        user_states[user_id] = None
        
        faq_text = """
‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

üî∏ <b>–ö–∞–∫ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑?</b>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ABC123DEF4 (10 —Å–∏–º–≤–æ–ª–æ–≤)

üî∏ <b>–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Å—Ç–∞—Ç—É—Å—ã?</b>
‚Ä¢ –í—ã–∫—É–ø–ª–µ–Ω - –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ö–∏—Ç–∞–µ
‚Ä¢ –ü—Ä–∏–±—ã–ª –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ì—É–∞–Ω—á–∂–æ—É - –∑–∞–∫–∞–∑ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω - –µ–¥–µ—Ç –≤ –ö–∏—Ç–∞–µ, –±—É–¥–µ—Ç –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –†–§ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π
‚Ä¢ –ü—Ä–∏–±—ã–ª –≤ –ú–æ—Å–∫–≤—É - —Å–∫–æ—Ä–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –í–æ–ª–≥–æ–≥—Ä–∞–¥
‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω

üî∏ <b>–ö–∞–∫ –¥–æ–ª–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞–∫–∞–∑?</b>
–û–±—ã—á–Ω–æ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è
        """
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if bot_instance.is_admin(user_id):
            back_callback = "back_from_admin"
        else:
            back_callback = "main_menu"
            
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_callback)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(faq_text, reply_markup=reply_markup, parse_mode='HTML')


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    error_message = str(context.error)
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã
    if any(phrase in error_message for phrase in [
        "Message is not modified",
        "terminated by other getUpdates request",
        "Conflict:",
        "BadRequest: Message is not modified",
        "400 Bad Request",
        "'NoneType' object has no attribute 'text'",
        "database is locked",
        "UNIQUE constraint failed",
        "Button_data_invalid"
    ]):
        return
    
    logger.error("Exception while handling an update:", exc_info=context.error)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global bot_instance
    bot_instance = OrderTrackerBot(BOT_TOKEN)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", start))  # –ö–æ–º–∞–Ω–¥–∞ /menu –≤–µ–¥–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  # –í—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("‚ö†Ô∏è  –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª stop_and_start.bat")
    
    try:
        application.run_polling()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        error_msg = str(e)
        if "Conflict" in error_msg or "getUpdates" in error_msg:
            print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: {error_msg}")
            print("üîß –†–µ—à–µ–Ω–∏–µ:")
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª stop_and_start.bat")
            print("2. –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: taskkill /f /im python.exe")
            print("3. –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
